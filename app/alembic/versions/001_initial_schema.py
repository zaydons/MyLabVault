"""Initial database schema

Revision ID: 001
Revises: 
Create Date: 2025-08-11 20:00:00.000000
"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if tables already exist (for existing databases)
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    existing_tables = inspector.get_table_names()
    
    # Only create tables if they don't already exist
    if 'panels' not in existing_tables:
        op.create_table('panels',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_panels_id'), 'panels', ['id'], unique=False)
        op.create_index(op.f('ix_panels_name'), 'panels', ['name'], unique=False)
    
    if 'providers' not in existing_tables:
        op.create_table('providers',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('specialty', sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_providers_id'), 'providers', ['id'], unique=False)
        op.create_index(op.f('ix_providers_name'), 'providers', ['name'], unique=False)
    
    if 'units' not in existing_tables:
        op.create_table('units',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
        )
        op.create_index(op.f('ix_units_id'), 'units', ['id'], unique=False)
        op.create_index(op.f('ix_units_name'), 'units', ['name'], unique=False)
    
    if 'patients' not in existing_tables:
        op.create_table('patients',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('date_of_birth', sa.DateTime(), nullable=True),
        sa.Column('gender', sa.String(length=10), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_patients_id'), 'patients', ['id'], unique=False)
        op.create_index(op.f('ix_patients_name'), 'patients', ['name'], unique=False)
    
    if 'user_settings' not in existing_tables:
        op.create_table('user_settings',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('options', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_user_settings_id'), 'user_settings', ['id'], unique=False)
        op.create_index(op.f('ix_user_settings_user_id'), 'user_settings', ['user_id'], unique=False)
    
    if 'labs' not in existing_tables:
        op.create_table('labs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('panel_id', sa.Integer(), nullable=False),
        sa.Column('unit_id', sa.Integer(), nullable=True),
        sa.Column('ref_low', sa.Float(), nullable=True),
        sa.Column('ref_high', sa.Float(), nullable=True),
        sa.Column('ref_type', sa.String(length=10), nullable=True),
        sa.Column('ref_value', sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(['panel_id'], ['panels.id'], ),
        sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_labs_id'), 'labs', ['id'], unique=False)
        op.create_index(op.f('ix_labs_name'), 'labs', ['name'], unique=False)
    
    if 'pdf_import_logs' not in existing_tables:
        op.create_table('pdf_import_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('filename', sa.String(length=255), nullable=False),
        sa.Column('file_hash', sa.String(length=64), nullable=True),
        sa.Column('batch_id', sa.String(length=36), nullable=True),
        sa.Column('total_tests_found', sa.Integer(), nullable=True),
        sa.Column('tests_imported', sa.Integer(), nullable=True),
        sa.Column('tests_skipped', sa.Integer(), nullable=True),
        sa.Column('date_collected', sa.String(length=50), nullable=True),
        sa.Column('provider_name', sa.String(length=255), nullable=True),
        sa.Column('provider_id', sa.Integer(), nullable=True),
        sa.Column('status', sa.String(length=50), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('file_path', sa.String(length=500), nullable=False),
        sa.Column('parsed_data', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'import_templates' not in existing_tables:
        op.create_table('import_templates',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('default_provider_id', sa.Integer(), nullable=True),
        sa.Column('auto_select_tests', sa.String(length=5), nullable=True),
        sa.Column('date_preference', sa.String(length=20), nullable=True),
        sa.Column('test_filters', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['default_provider_id'], ['providers.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'lab_results' not in existing_tables:
        op.create_table('lab_results',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('lab_id', sa.Integer(), nullable=False),
        sa.Column('patient_id', sa.Integer(), nullable=False),
        sa.Column('provider_id', sa.Integer(), nullable=False),
        sa.Column('result', sa.Float(), nullable=True),
        sa.Column('result_text', sa.String(length=255), nullable=True),
        sa.Column('date_collected', sa.DateTime(), nullable=False),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('pdf_import_id', sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(['lab_id'], ['labs.id'], ),
        sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
        sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_lab_results_date_collected'), 'lab_results', ['date_collected'], unique=False)
        op.create_index(op.f('ix_lab_results_id'), 'lab_results', ['id'], unique=False)
        op.create_index(op.f('ix_lab_results_lab_id'), 'lab_results', ['lab_id'], unique=False)
        op.create_index(op.f('ix_lab_results_patient_id'), 'lab_results', ['patient_id'], unique=False)
        op.create_index(op.f('ix_lab_results_pdf_import_id'), 'lab_results', ['pdf_import_id'], unique=False)
        op.create_index(op.f('ix_lab_results_provider_id'), 'lab_results', ['provider_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_lab_results_provider_id'), table_name='lab_results')
    op.drop_index(op.f('ix_lab_results_pdf_import_id'), table_name='lab_results')
    op.drop_index(op.f('ix_lab_results_patient_id'), table_name='lab_results')
    op.drop_index(op.f('ix_lab_results_lab_id'), table_name='lab_results')
    op.drop_index(op.f('ix_lab_results_id'), table_name='lab_results')
    op.drop_index(op.f('ix_lab_results_date_collected'), table_name='lab_results')
    op.drop_table('lab_results')
    op.drop_table('import_templates')
    op.drop_table('pdf_import_logs')
    op.drop_index(op.f('ix_labs_name'), table_name='labs')
    op.drop_index(op.f('ix_labs_id'), table_name='labs')
    op.drop_table('labs')
    op.drop_index(op.f('ix_user_settings_user_id'), table_name='user_settings')
    op.drop_index(op.f('ix_user_settings_id'), table_name='user_settings')
    op.drop_table('user_settings')
    op.drop_index(op.f('ix_patients_name'), table_name='patients')
    op.drop_index(op.f('ix_patients_id'), table_name='patients')
    op.drop_table('patients')
    op.drop_index(op.f('ix_units_name'), table_name='units')
    op.drop_index(op.f('ix_units_id'), table_name='units')
    op.drop_table('units')
    op.drop_index(op.f('ix_providers_name'), table_name='providers')
    op.drop_index(op.f('ix_providers_id'), table_name='providers')
    op.drop_table('providers')
    op.drop_index(op.f('ix_panels_name'), table_name='panels')
    op.drop_index(op.f('ix_panels_id'), table_name='panels')
    op.drop_table('panels')
    # ### end Alembic commands ###
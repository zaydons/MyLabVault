"""Convert date_of_birth from DateTime to Date

Revision ID: 002
Revises: 001
Create Date: 2025-08-12 20:05:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '002'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # For SQLite, we need to recreate the table to change column type
    
    # Create new table with correct date type
    op.create_table('patients_new',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('date_of_birth', sa.Date(), nullable=True),
        sa.Column('gender', sa.String(length=10), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Copy data from old table to new table, converting datetime to date
    op.execute("""
        INSERT INTO patients_new (id, name, date_of_birth, gender)
        SELECT 
            id, 
            name, 
            CASE 
                WHEN date_of_birth IS NOT NULL 
                THEN date(date_of_birth)
                ELSE NULL 
            END as date_of_birth,
            gender
        FROM patients
    """)
    
    # Drop old table
    op.drop_table('patients')
    
    # Rename new table
    op.rename_table('patients_new', 'patients')
    
    # Recreate indexes
    op.create_index(op.f('ix_patients_id'), 'patients', ['id'], unique=False)
    op.create_index(op.f('ix_patients_name'), 'patients', ['name'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Convert back to DateTime
    
    # Create new table with DateTime type
    op.create_table('patients_new',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('date_of_birth', sa.DateTime(), nullable=True),
        sa.Column('gender', sa.String(length=10), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Copy data back, converting date to datetime
    op.execute("""
        INSERT INTO patients_new (id, name, date_of_birth, gender)
        SELECT 
            id, 
            name, 
            CASE 
                WHEN date_of_birth IS NOT NULL 
                THEN datetime(date_of_birth || ' 00:00:00')
                ELSE NULL 
            END as date_of_birth,
            gender
        FROM patients
    """)
    
    # Drop old table
    op.drop_table('patients')
    
    # Rename new table
    op.rename_table('patients_new', 'patients')
    
    # Recreate indexes
    op.create_index(op.f('ix_patients_id'), 'patients', ['id'], unique=False)
    op.create_index(op.f('ix_patients_name'), 'patients', ['name'], unique=False)
    # ### end Alembic commands ###